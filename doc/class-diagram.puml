@startuml

hide empty methods
hide empty fields

class Synchronizer {
    +synchronize($className, $force)
}

interface SourceAdapter {
    +getObjectsOrderedById()
}

interface Mapper {
    +map($sourceObject, $destinationObject) : MapResult
    +idOf($sourceObject):int
    +setForce($force)
}

interface DestinationAdapter {
    +getObjectsOrderedById($className)
    +createObject($id, $className)
    +delete($objectInDestinationSystem)
    +updated($objectInDestinationSystem)
    +commit()
    +idOf($objectInDestinationSystem):int
}

interface UpdateableObjectProviderInterface {
    +prepareUpdate($destinationObject):mixed
}
note bottom: By implementing this, DestinationAdapter\ncan use different objects for updates than\nthose returned from getObjectsOrderedById().

interface ProgressListenerInterface {
    +afterObjectProcessed()
}
note bottom: When DestinationAdapters implement this,\nafterObjectProcessed() will be called after\nevery step the Synchronizer made.

Synchronizer --> SourceAdapter
Synchronizer --> Mapper
Synchronizer --> DestinationAdapter

@enduml
