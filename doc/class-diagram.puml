@startuml

hide empty methods
hide empty fields

class Indexer {
    +__construct(Adapter $adapter, Adapter $adapter)
    +index(string $type, callable $mapCallback)
}

class Synchronizer {
    +__construct(Adapter $adapter, Adapter $adapter)
    +synchronize(string $type, callable $mapCallback)
}

interface Adapter {
    +getObjectsOrderedById($type)
    +idOf($object):int
    +createObject($id, $type)
    +delete($object)
    +updated($object)
    +commit()
}

interface IndexableObjectProvider {
    +getObjectsForIndexing($type)
    +statusOf($object):int
}
note bottom: By implementing this, Adapter can\nbe used as source for Indexer class

interface UpdateableObjectProvider {
    +prepareUpdate($object):mixed
}
note bottom: By implementing this, Adapter can use different\nobjects for updates than those returned from\ngetObjectsOrderedById($type).

interface ProgressListener {
    +afterObjectProcessed()
}
note bottom: When Adapters implement this,\nafterObjectProcessed() will be called after\nevery step the Synchronizer made.

Synchronizer --> Adapter
Indexer --> Adapter
Adapter -[hidden]-> IndexableObjectProvider
Adapter -[hidden]-> UpdateableObjectProvider
Adapter -[hidden]-> ProgressListener

@enduml
